### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""App configuration object"""
input AppConfigInput {
  email: EmailConfigInput
}

type AppError {
  errors: [Error!]!
}

type AssetSource {
  bucket: String!
  cloudType: String!
  id: ID!
  key: String!
  publicUrl: String!
  region: String!
  uploadUrl: String!
}

input AssetSourceInput {
  bucket: String!
  cloudType: String!
  key: String!
  publicUrl: String!
  region: String!
  secret: String!
  uploadUrl: String!
}

union AssetSourceResponse = AppError | AssetSource

type AuthToken {
  duration: Int!
  generatedAt: DateTime!
  id: String!
  type: String!
}

union AuthTokenResponse = AppError | AuthToken

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input EmailConfigInput {
  apiKey: String!
  fromEmail: String!
  fromName: String!
  service: EmailServiceType!
}

"""Supported email services. Currently only sendgrid."""
enum EmailServiceType {
  sendgrid
}

type Error {
  code: String!
  message: String!
}

input ImageInput {
  extension: String!
  title: String!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  addAdministrator(admin: UserInput!): ResultResponse!
  addMemberToPublication(user: UserInput!): ResultResponse!
  approveTag(approved: Boolean!, tagId: ID!): Tag!
  authenticateUser(input: TokenInput!): AuthTokenResponse!
  createAssetSource(source: AssetSourceInput!): AssetSourceResponse!
  createPost(
    post: PostInput!

    """Ids of the tags that you want to associate"""
    tags: [ID!]!
  ): PostResponse!
  createPublication(input: NewPublicationInput!): NewPublicationResponse!
  createTag(tag: TagInput!): TagResponse!
  deletePost(postId: ID!): PostResponse!
  forgotPassword(username: String!): Boolean!
  initialize(admin: UserInput!, password: String!): ResultResponse!
  resetPassword(code: String!, password: String!): Boolean!
  updateAppConfig(config: AppConfigInput!): ResultResponse!
  updatePost(
    post: PostInput!
    postId: ID!

    """Ids of the tags that you want to associate"""
    tags: [ID!]!
  ): PostResponse!
  updateTag(tag: TagInput!, tagId: ID!): TagResponse!
  uploadImage(image: ImageInput!): SignedUrlResponse!
}

input NewPublicationInput {
  firstUser: UserInput!
  fromEmail: String!
  name: String!
  password: String
  publicUrl: String!
  quota: QuotaInput!
}

union NewPublicationResponse = AppError | Publication

type Post {
  content: JSONObject!
  id: ID!
  meta: PostMeta
  slug: String!
  title: String!
}

input PostInput {
  content: JSONObject!
  meta: PostMetaInput!
  slug: String
  title: String!
}

type PostMeta {
  description: String!
  postId: ID!
  title: String!
}

input PostMetaInput {
  description: String!
  title: String!
}

union PostResponse = AppError | Post

type Publication {
  fromEmail: String!
  id: ID!
  name: String!
  publicUrl: String!
}

type Query {
  getPublications: [Publication!]!
  getTags(approved: Boolean!, search: String, skip: Int!, top: Int!): [Tag!]!
}

"""Project/Publication quota"""
input QuotaInput {
  """Maximum storage space allowed for assets in MBs."""
  assetSize: Int!
  staffCapacity: Int!
}

type Result {
  status: Boolean!
}

union ResultResponse = AppError | Result

type SignedUrl {
  fields: [UrlFormField!]!
  url: String!
}

union SignedUrlResponse = AppError | SignedUrl

type Tag {
  approved: Boolean!
  description: String!
  id: ID!
  name: String!
  slug: String!
}

input TagInput {
  description: String
  name: String!
  slug: String
}

union TagResponse = AppError | Tag

input TokenInput {
  password: String!
  username: String!
}

"""Form fields to be submitted along with Signed URL"""
type UrlFormField {
  key: String!
  value: String!
}

"""New User Input"""
input UserInput {
  email: String!
  firstName: String!
  lastName: String!
}
