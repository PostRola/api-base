datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = []
}


model EmailConfig {
  id            String    @id @default(uuid()) @db.Uuid
  fromName      String    @map("from_name")
  fromEmail     String    @map("from_email")
  apiKey        String    @map("api_key")

  // Identifies the type of mail service - sendgrid, mailgun, mailchimp, etc.
  service       String

  @@map("email_config")
}


model ClientApp {
  id              String      @id @default(uuid()) @db.Uuid

  description     String

  secret          String
  hashFn          String      @map("hash_fn")

  createdAt       DateTime    @db.Timestamptz() @default(now()) @map("created_at")
  updatedAt       DateTime    @db.Timestamptz() @updatedAt @map("updated_at")

  tokens          ClientAppToken[]

  @@map("client_app")
}


model Tenant {
  id              String          @id @default(cuid())
  name            String

  publication     Publication[]
  users           TenantUsers[]

  @@map("tenant")
}


model Invitation {
  id              String        @id @default(uuid()) @db.Uuid
  code            String        @unique

  firstName       String        @map("first_name")
  lastName        String        @map("last_name")
  email           String

  // duration in milliseconds
  duration        Int
  expiryAt        DateTime      @db.Timestamptz() @map("expiry_at")

  publication     Publication   @relation(fields: [publicationId], references: [id])
  publicationId   BigInt        @map("publication_id")

  role            Role          @relation(fields: [roleId], references: [id])
  roleId          Int           @map("role_id")

  createdAt       DateTime      @db.Timestamptz() @default(now()) @map("created_at")
  updatedAt       DateTime      @db.Timestamptz() @updatedAt @map("updated_at")

  @@map("invitation")
  @@unique(fields: [email, publicationId])
}


model User {
  id              String                  @id @default(cuid())

  firstName       String                  @map("first_name")
  lastName        String                  @map("last_name")
  email           String                  @unique

  password        String
  hashFn          String                  @map("hash_fn")

  posts           Post[]

  tenants         TenantUsers[]
  publication     PublicationUser[]
  roles           UserPublicationRole[]

  createdAt       DateTime                @db.Timestamptz() @default(now()) @map("created_at")
  updatedAt       DateTime                @db.Timestamptz() @updatedAt @map("updated_at")

  tokens          UserToken[]
  loginAttempt    LoginAttempt?
  resetRequest    ResetPasswordRequest?

  @@map("app_user")
}


model TenantUsers {
  id          String    @id @default(uuid()) @db.Uuid

  user        User      @relation(fields: [userId], references: [id])
  userId      String    @map("user_id")

  tenant      Tenant    @relation(fields: [tenantId], references: [id])
  tenantId    String    @map("tenant_id")
}


model ClientAppToken {
  id              String      @id
  generatedAt     DateTime    @default(now()) @db.Timestamptz() @map("generated_at")

  // duration in milliseconds
  duration        Int

  clientApp       ClientApp   @relation(fields: [clientAppId], references: [id])
  clientAppId     String      @map("client_app_id") @db.Uuid

  @@map("client_app_token")
}


model UserToken {
  id              String      @id

  generatedAt     DateTime    @default(now()) @db.Timestamptz() @map("generated_at")

  // duration in milliseconds
  duration        Int

  user            User        @relation(fields: [userId], references: [id])
  userId          String      @map("user_id")

  @@map("user_token")
}


model ResetPasswordRequest {
  id          String    @id @default(uuid()) @db.Uuid

  code        String    @unique
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique @map("user_id")

  createdAt   DateTime  @db.Timestamptz() @default(now()) @map("created_at")
  updatedAt   DateTime  @db.Timestamptz() @updatedAt @map("updated_at")

  @@map("reset_password_request")
}


model LoginAttempt {
  user          User      @relation(fields: [userId], references: [id])
  userId        String    @id @map("user_id")
  attempts      Int
  lastAttempt   DateTime  @db.Timestamptz() @updatedAt @map("last_attempt")

  @@map("login_attempt")
}


model Publication {
  id            BigInt                  @id @default(autoincrement())

  fromEmail     String                  @map("from_email")
  publicUrl     String                  @unique @map("public_url")

  quota         Quota?
  assets        Asset[]

  tenant        Tenant                  @relation(fields: [tenantId], references: [id])
  tenantId      String                  @map("tenant_id")

  invitations   Invitation[]
  users         PublicationUser[]
  roles         UserPublicationRole[]
  posts         Post[]

  @@map("publication")
}


// Used to maintain the maximum size limits for uploaded assets and memberships
model Quota {
  id              BigInt        @id

  publication     Publication   @relation(fields: [id], references: [id])

  sizeInMB        Int           @map("size_in_mb")
  maxCapacity     Int           @map("max_capacity")
  occupied        Int

  // TODO: Add the constraint where occupied <= maxCapacity
  @@map("quota")
}


model PublicationUser {
  id              String        @id @default(uuid()) @db.Uuid

  user            User          @relation(fields: [userId], references: [id])
  userId          String        @map("user_id")

  publication     Publication   @relation(fields: [publicationId], references: [id])
  publicationId   BigInt        @map("publication_id")

  @@map("publication_user")
  @@unique([userId, publicationId])
}


model UserPublicationRole {
  id              String          @id @default(uuid()) @db.Uuid

  user            User            @relation(fields: [userId], references: [id])
  userId          String          @map("user_id")

  publication     Publication     @relation(fields: [publicationId], references: [id])
  publicationId   BigInt          @map("publication_id")

  role            Role            @relation(fields: [roleId], references: [id])
  roleId          Int             @map("role_id")

  @@map("user_publication_role")
  @@unique([userId, publicationId, roleId])
}


model Role {
  id              Int                     @id
  name            String
  displayName     String                  @map("display_name")

  users           UserPublicationRole[]
  invitations     Invitation[]

  @@map("role")
}


model Tag {
  id            String      @id @default(uuid()) @db.Uuid

  name          String
  slug          String      @unique()
  description   String
  approved      Boolean     @default(false)

  posts         PostTag[]

  createdAt     DateTime    @db.Timestamptz() @default(now()) @map("created_at")
  updatedAt     DateTime    @db.Timestamptz() @updatedAt @map("updated_at")

  @@map("tag")
}


model Post {
  id              BigInt          @id @default(autoincrement())

  owner           User            @relation(fields: [ownerId], references: [id])
  ownerId         String          @map("owner_id")

  slug            String
  canonicalUrl    String?         @map("canonical_url")

  publication     Publication     @relation(fields: [publicationId], references: [id])
  publicationId   BigInt          @map("publication_id")

  createdAt       DateTime        @db.Timestamptz() @default(now()) @map("created_at")
  updatedAt       DateTime        @db.Timestamptz() @updatedAt @map("updated_at")
  publishedAt     DateTime?       @db.Timestamptz() @map("published_at")

  versions        PostVersion[]

  tags            PostTag[]
  postMeta        PostMeta?

  @@map("post")
  @@unique([publicationId, slug])
}


// Relationship is 1 --> 2
// One Post will have at max two versions.
model PostVersion {
  id              String        @id @default(uuid()) @db.Uuid

  post            Post          @relation(fields: [postId], references: [id])
  postId          BigInt        @map("post_id")

  version         Int

  title           String
  content         Json          @db.JsonB

  postImage       PostImage[]

  @@map("post_version")
  @@unique([postId, version])
}


model PostMeta {
  id                BigInt      @id
  post              Post        @relation(fields: [id], references: [id])

  title             String
  description       String

  featuredImage     Image?      @relation(fields: [imageId], references: [id])
  imageId           String?     @map("image_id") @db.Uuid

  @@map("post_meta")
}


model PostTag {
  post      Post      @relation(fields: [postId], references: [id])
  postId    BigInt    @map("post_id")

  tag       Tag       @relation(fields: [tagId], references: [id])
  tagId     String    @map("tag_id") @db.Uuid

  order     Int

  @@map("post_tag")
  @@id([postId, tagId])
}


model AssetStorage {
  id          Int       @id @default(autoincrement())

  // do, aws, azure, google
  cloudType   String    @map("cloud_type")

  // Region - Digital Ocean, AWS
  // Blank - Azure, Google (But still required to ensure uniqueness)
  region      String

  // Space - Digital Ocean
  // Bucket - AWS, Google
  // Container - Azure
  bucket      String

  publicUrl   String    @map("public_url")
  uploadUrl   String    @map("upload_url")

  // Connection string for azure
  key         String
  secret      String

  assets      Asset[]

  @@map("asset_storage")
  @@unique([cloudType, region, bucket])
}


model Asset {
  id              String        @id @default(uuid()) @db.Uuid

  storage         AssetStorage  @relation(fields: [storageId], references: [id])
  storageId       Int           @map("source_id")

  title           String
  fileName        String        @map("file_name") @unique()
  contentType     String        @map("content_type")

  size            Int
  sizeUnit        String        @map("size_unit")

  createdAt       DateTime      @db.Timestamptz() @default(now()) @map("created_at")
  updatedAt       DateTime      @db.Timestamptz() @updatedAt @map("updated_at")

  verified        Boolean       @default(false)

  publication     Publication   @relation(fields: [publicationId], references: [id])
  publicationId   BigInt        @map("publication_id")

  image         Image?

  @@map("asset")
  @@index([storageId])
}


model Image {
  id          String      @id @db.Uuid
  asset       Asset       @relation(fields: [id], references: [id])

  caption     Json        @db.JsonB
  altText     String      @map("alt_text")

  postImage   PostImage[]
  postMeta    PostMeta[]

  @@map("image")
}


model PostImage {
  image         Image           @relation(fields: [imageId], references: [id])
  imageId       String          @map("image_id") @db.Uuid

  revision      PostVersion     @relation(fields: [revisionId], references: [id])
  revisionId    String          @map("revision_id") @db.Uuid

  @@id([imageId, revisionId])
  @@map("post_image")
}
