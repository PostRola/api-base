datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["selectRelationCount", "orderByAggregateGroup"]
}


model EmailConfig {
  id            BigInt    @id @default(autoincrement())
  fromName      String    @map("from_name")
  fromEmail     String    @map("from_email")
  apiKey        String    @map("api_key")

  // Identifies the type of mail service - sendgrid, mailgun, mailchimp, etc.
  service       String

  @@map("email_config")
}


model Project {
  id            BigInt    @id @default(autoincrement())
  name          String
  fromEmail     String    @map("from_email")

  publication   Publication?
  quota         Quota?
  assets        Asset[]
  invitations   Invitation[]

  @@map("project")
}


// Allows to maintain the maximum size limits for uploaded assets
model Quota {
  id              BigInt    @id
  project         Project   @relation(fields: [id], references: [id])
  sizeInBytes     Int       @map("size_in_bytes")
  staffCapacity   Int       @map("staff_capacity")
  occupied        Int

  @@map("quota")
}


model Invitation {
  id            BigInt      @id @default(autoincrement())
  code          String      @unique

  firstName     String      @map("first_name")
  lastName      String      @map("last_name")
  email         String

  // If invitation is not issued against a project,
  // it means it is an admin user invitation.
  project       Project?    @relation(fields: [projectId], references: [id])
  projectId     BigInt?     @map("project_id")

  createdAt     DateTime    @db.Timestamptz() @default(now()) @map("created_at")
  updatedAt     DateTime    @db.Timestamptz() @updatedAt @map("updated_at")

  @@map("invitation")
}


model User {
  id                BigInt      @id @default(autoincrement())

  firstName         String      @map("first_name")
  lastName          String      @map("last_name")
  email             String      @unique

  password          String
  passwordHashFn    String      @map("password_hash_fn")

  createdAt         DateTime    @db.Timestamptz() @default(now()) @map("created_at")
  updatedAt         DateTime    @db.Timestamptz() @updatedAt @map("updated_at")

  staff             Staff[]
  tokens            UserToken[]
  posts             Post[]
  resetRequest      ResetPasswordRequest?
  loginAttempt      LoginAttempt?
  admin             Admin?

  @@map("app_user")
}


model Admin {
  id            BigInt      @id
  superAdmin    Boolean     @map("super_admin")
  user          User        @relation(fields: [id], references: [id])

  @@map("admin")
}


model UserToken {
  id            String      @id
  generatedAt   DateTime    @default(now()) @db.Timestamptz() @map("generated_at")

  // duration in milliseconds
  duration      Int

  user          User        @relation(fields: [userId], references: [id])
  userId        BigInt      @map("user_id")

  @@map("user_token")
}


model ResetPasswordRequest {
  id          BigInt    @id @default(autoincrement())
  code        String    @unique
  user        User      @relation(fields: [userId], references: [id])
  userId      BigInt    @unique @map("user_id")

  createdAt   DateTime  @db.Timestamptz() @default(now()) @map("created_at")
  updatedAt   DateTime  @db.Timestamptz() @updatedAt @map("updated_at")

  @@map("reset_password_request")
}


model LoginAttempt {
  user          User      @relation(fields: [userId], references: [id])
  userId        BigInt    @id @map("user_id")
  attempts      Int
  lastAttempt   DateTime  @db.Timestamptz() @updatedAt @map("last_attempt")

  @@map("login_attempt")
}


model Publication {
  id            BigInt    @id
  project       Project   @relation(fields: [id], references: [id])
  publicUrl     String    @unique @map("public_url")

  staff         Staff[]
  posts         Post[]

  @@map("publication")
}


model Staff {
  publication     Publication   @relation(fields: [publicationId], references: [id])
  publicationId   BigInt        @map("publication_id")

  user            User          @relation(fields: [userId], references: [id])
  userId          BigInt        @map("user_id")

  @@map("staff")
  @@id([publicationId, userId])
}


model Tag {
  id            BigInt      @id @default(autoincrement())
  name          String
  slug          String      @unique()
  description   String
  approved      Boolean     @default(false)

  posts         PostTags[]

  createdAt     DateTime    @db.Timestamptz() @default(now()) @map("created_at")
  updatedAt     DateTime    @db.Timestamptz() @updatedAt @map("updated_at")

  @@map("tag")
}


model Post {
  id              BigInt        @id @default(autoincrement())
  title           String
  slug            String

  content         Json          @db.JsonB

  owner           User          @relation(fields: [ownerId], references: [id])
  ownerId         BigInt        @map("owner_id")

  publication     Publication   @relation(fields: [publicationId], references: [id])
  publicationId   BigInt        @map("publication_id")

  base            Post?         @relation("DraftCopy", fields: [baseId], references: [id])
  baseId          BigInt?       @unique @map("base_id")

  draft           Post?         @relation("DraftCopy")

  createdAt       DateTime      @db.Timestamptz() @default(now()) @map("created_at")
  updatedAt       DateTime      @db.Timestamptz() @updatedAt @map("updated_at")
  publishedAt     DateTime?     @db.Timestamptz() @map("published_at")

  tags            PostTags[]
  postMeta        PostMeta?
  postImage       PostImage[]

  @@map("post")
  @@unique([slug, baseId])
}


model PostMeta {
  id              BigInt      @id
  post            Post        @relation(fields: [id], references: [id])

  title           String
  description     String

  @@map("post_meta")
}


model PostTags {
  post    Post    @relation(fields: [postId], references: [id])
  postId  BigInt  @map("post_id")

  tag     Tag     @relation(fields: [tagId], references: [id])
  tagId   BigInt  @map("tag_id")

  order   Int

  @@map("post_tags")
  @@id([postId, tagId])
}


model AssetSource {
  id          Int       @id @default(autoincrement())

  // do, aws, azure, google
  cloudType   String    @map("cloud_type")

  // Region - Digital Ocean, AWS
  // Blank - Azure, Google (But still required to ensure uniqueness)
  region      String

  // Space - Digital Ocean
  // Bucket - AWS, Google
  // Container - Azure
  bucket      String

  publicUrl   String    @map("public_url")
  uploadUrl   String    @map("upload_url")

  // Connection string for azure
  key         String
  secret      String

  assets      Asset[]

  @@map("asset_source")
  @@unique([cloudType, region, bucket])
}


model Asset {
  id            BigInt        @id @default(autoincrement())

  source        AssetSource   @relation(fields: [sourceId], references: [id])
  sourceId      Int           @map("source_id")

  title         String
  fileName      String        @map("file_name") @unique()
  contentType   String        @map("content_type")

  size          Int
  sizeUnit      String        @map("size_unit")

  createdAt     DateTime      @db.Timestamptz() @default(now()) @map("created_at")
  updatedAt     DateTime      @db.Timestamptz() @updatedAt @map("updated_at")

  verified      Boolean       @default(false)

  project       Project       @relation(fields: [projectId], references: [id])
  projectId     BigInt        @map("project_id")

  image         Image?

  @@map("asset")
  @@index([sourceId])
}


model Image {
  id          BigInt      @id
  asset       Asset       @relation(fields: [id], references: [id])

  caption     Json        @db.JsonB
  altText     String      @map("alt_text")

  postImage   PostImage?

  @@map("image")
}


model PostImage {
  image       Image     @relation(fields: [imageId], references: [id])
  imageId     BigInt    @map("image_id")

  post        Post      @relation(fields: [postId], references: [id])
  postId      BigInt    @map("project_id")

  @@id([imageId, postId])
  @@map("post_image")
}
